# -*- coding: utf-8 -*-
"""Letter recognition problem using SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JSa2tY0nmwS3y8OSHhgwakpiJd7XZZAu

Course Title: Applied Machine Learning

Name:Prachi Bhatt
"""

#To solve an interesting letter recognition problem using SVM.USE LETTER-RECOGNITION.CSV 

#Initial Step is to import the required libraries
# import libraries
import numpy as vsk_np
import pandas as pd

# This is the SVM Classifies
from sklearn.svm import SVC # Support Vector Classifier
# sklearn is a package
# svm is a library under sklearn
# SVC is a class under svm library

# We need to use Logistic Regression Library to compare our result with SVM
# and check performance of both models becuase of both are classifiers
from sklearn.linear_model import LogisticRegression

# This library is used to provide the result as accuracy score
# and also check the performance of the model
from sklearn.metrics import accuracy_score

#for importing the csv file from the directory
import os 
working_directory=os.getcwd()
print(working_directory)

path=working_directory + '/letter-recognition.csv'  # the dataset will be read out in read only mode.
df=pd.read_csv(path)
df # it displays the entire dataset details

dataset=df.dropna()
dataset

dataset.columns

# we are Choosing dependent and independent variables

#split dataset in features (Independent) and target (Dependent) variable

X = dataset.iloc[:,[1, 16]].values  #independent variable

X

Y = dataset.iloc[:,0].values #dependent variable or target class

Y

# Step-2 Spliting dataset into Training and Testing datasets

# We are getting the training data and testing data
# Import library for splitting the dataset into train and test.
from sklearn.model_selection import train_test_split

#Using the train_test_split to create train and test sets.
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state = 10, test_size = 0.40)

print(X_train) # Training datasets

print (Y_train)

print (X_test)

print (Y_test)

# Now we have two models for comparing between SVM and Logistic Regression
# Next step will be to build the models

#Step 3: Building the model using Support Vector Machine
#Support Vector Classifier

from sklearn.svm import SVC #importing SVM classifier
svm_clf = SVC() #Creating dynamic object for SVC class 
# we are creating object of the SVC class to access the various methods 
# of the SVC class

# Fit the model as per the training dataset
svm_clf.fit(X_train,Y_train)

print ("Now SVM model is fit using training dataset.")

# Here we are building the logistic regression model
# Building the model using Logistic Regression class
from sklearn.linear_model import LogisticRegression

# we need to create an object to access the methods for logistic regression.
log_clf = LogisticRegression()

# Fitting the model as per training dataset
log_clf.fit(X_train,Y_train)

print ("Now Logistic Regression model is fit using training dataset.")

# Step 4: To Predict the model by testing dataset
# By using predict method we can predict the model as per testing dataset

#prediction
# we need to use features or values from independent variables
# data from testing dataset
Y_pred_svm = svm_clf.predict(X_test)  
# X_test contains the features on which we are predicting 

Y_pred_log = log_clf.predict(X_test)
#Prediting the model by testing data

print ("Actual Values:", Y_test) # actual testing dataset
print ("Predicted by SVM:", Y_pred_svm) # predicted testing dataset for SVM
print ("Predicted by Logistic Regression:", Y_pred_log) # predicted testing dataset for Logistic regression

# Step: 5 predicting a new value from dataset or newly inputted value

Y_pred_svm_new = svm_clf.predict([[157, 100]]) 

Y_pred_log_new = log_clf.predict([[157, 100]])

# print the predicted gender
print("Predicted Gender of a person by Logistic Regression Model :", Y_pred_log_new)
print("Predicted Gender of a person by SVM Model : ", Y_pred_svm_new)

# Step 6: Model Evaluation

# When we need to calculate the accuracy of the model under classification 
# always use testing dataset to get the result

# we are measuring the performance of the model by accuracy score
from sklearn.metrics import accuracy_score

#accuracy scores
log_acc = accuracy_score(Y_pred_log, Y_test) #(prediction value , actual value)
svm_acc = accuracy_score(Y_pred_svm, Y_test)

print ("Accuracy of Logistic Regression Model in %:",log_acc*100)
print("Accuracy of Support Vector Machine Model in %:",svm_acc*100)

# You want to print the classification report of the classification models
# use classification_report method from metrics library.

from sklearn import metrics

print(metrics.classification_report(Y_test, Y_pred_log))
print(metrics.classification_report(Y_test, Y_pred_svm))

classifiers = ['Logistic Regression' , 'SVC']
accuracy = vsk_np.array([log_acc, svm_acc])

# argmax is methos which returns the maximum value from the array's values
max_acc = vsk_np.argmax(accuracy)

print(classifiers[max_acc] + ' is the better classifier for this problem')

